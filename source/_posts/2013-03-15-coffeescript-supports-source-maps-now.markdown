---
layout: post
title: "CoffeeScript支持source maps了，在浏览器中调试CoffeeScript已成为现实"
date: 2013-03-15 20:23
comments: true
categories: [CoffeeScript, JavaScript]
---

CoffeeScript 1.6.1版本的新功能之一，就是支持source maps。

什么是source maps？简单的说，它可以通过一定的方式，从编译/压缩后的JavaScript代码，找到对应的未编译/压缩的源文件。

这个技术就是用来调试用的，目前可以用在两个地方：

1. 从压缩后的JavaScript代码找到未压缩的版本，让你在生产环境下调试时，不至于面对天书一样的JavaScript无从下手。
2. 从编译后的JavaScript代码找到编译之前的CoffeeScript代码，不用你身体内置编译器了。

我们可以建一个简单的项目试试，如果你不想动手的话，看看代码和图片也足够明白了。

<!-- more -->

## 一个小实验

需要环境：Node.js, npm, 已安装coffee-script包，Google Chrome最新版

先为项目建立一个文件夹叫aaa。里面包含两个文件，a.coffee和a.html，原谅我起的名字吧～

```coffeescript a.coffee
window.hello = ->
  console.log 'Hello World'
```

```html a.html
<!DOCTYPE html>
<html>
  <head>
    <script type="text/javascript" src="a.js"></script>
  </head>
  <body></body>
</html>
```

然后在aaa目录下，执行coffee命令编译a.coffee，带上参数 -m 用于生成source maps需要的文件。

```bash Terminal
coffee -cm a.coffee
```

这会生成两个文件，a.js和a.map，来看看这个两个文件：

```javascript a.js
//@ sourceMappingURL=a.map
// Generated by CoffeeScript 1.6.1
(function() {

  window.hello = function() {
    return console.log('Hello World');
  };

}).call(this);
```

```json a.map
{
  "version": 3,
  "file": "a.js",
  "sourceRoot": "",
  "sources": [
    "a.coffee"
  ],
  "names": [],
  "mappings": ";;AAAA;CAAA;CAAA,CAAA,CAAe,EAAf,CAAM,GAAS;CACL,EAAR,IAAO,IAAP,EAAA;CADF,EAAe;CAAf"
}
```

a.js自然是编译后的JavaScript文件，跟以前不同的是开头有两行注释。其中第一行就是告诉浏览器去找一个map文件 -- a.map。
浏览器就会通过a.map，把编译前后代的代码一一对应起来。a.map中的mappings内容就是记录这段内容的，它会根据a.coffee的改变而改变。
有兴趣的可以自行修改a.coffee尝试下。

项目到这里就搞完了。现在用浏览器实验下。

现在我们用Google Chrome打开a.html。再打开Inspector工具。先点击右下角的齿轮图标打开Settings，勾选Enable source maps。

{% img /images/blog/settings_source_maps.png %}

然后关闭Settings，点击上面的Sources标签查看源代码，你会看到浏览器列出了a.coffee文件！

{% img /images/blog/sources_coffee.png %}

现在我们先打个断点，然后执行hello函数看看：

{% img /images/blog/sources_coffee_debug.png %}

See ?  It works !

## 小结

不难看出，要做到在浏览器中调试CoffeeScript代码，必须做到以下几点：

1. 浏览器支持source maps，目前我只知道Google Chrome支持，其他浏览器的情况未知。
2. JavaScript文件中提供关于map文件的信息。这需要CoffeeScript编译时加上 -m 参数。
3. 浏览器可以通过url获取到coffee文件和map文件。

也许因为这些原因，目前Rails项目里面还不能使用source maps直接调试CoffeeScript文件。好消息是Sprocket现在正在添加
对source maps功能的支持，应该不久就会有结果。到时候用Rails的我们就又high啦。

另外，source maps只是一个映射到源文件的技术，这就是说以后还可以利用这个技术在浏览器中看SASS和LESS，说不定还可以通过html看erb，slim和haml？前景可谓一片光明。

## 参考文档

* [CoffeeScript source maps](http://coffeescript.org/#source-maps)  
  CoffeeScript官网的介绍。

* [Introduction to JavaScript Source Maps](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/)  
  介绍source maps技术，想深挖原理的可以看看。里面有个demo，点击一段未压缩的JavaScript代码，可以看到该段代码对应源文件中的哪一行，非常cool。

* [nettuts+ Source Maps 101](http://net.tutsplus.com/tutorials/tools-and-tips/source-maps-101/)  
  这篇文章讲的很细，包括从压缩的JavaScript映射到未压缩的版本，从JavaScript映射到TypeScript（微软的预编译语言，更类似静态语言）等等。
